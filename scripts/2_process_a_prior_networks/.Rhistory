Author: Dezso Modos
# Date: April 2020
#
# Script to download directed and signed OmniPath protein-protein interactions and regulatory interactions from
# from DoRothEA (within OmniPath, confidence levels A,B,C)
#
# Input:
#
#
# Output:
#
#
library(dplyr)
library(tibble)
library(purrr)
library(openxlsx)
library(igraph)
library(qgraph)
if(!'OmnipathR' %in% installed.packages()[,"Package"]){
require(devtools)
install_github('saezlab/OmnipathR')
}
require(OmnipathR)
library(OmnipathR)
outdir <- ""
outdir <- ""
# Get OmniPath PPI interaction network
ia_omnipath <- import_Omnipath_Interactions() %>% as_tibble()
# If you need higher coverage on PPI add these with `bind_rows` below
ia_ligrec <- import_LigrecExtra_Interactions() %>% as_tibble()
ia_pwextra <- import_PathwayExtra_Interactions() %>% as_tibble()
ia_kinaseextra <- import_KinaseExtra_Interactions() %>% as_tibble()
interactions <- as_tibble(
bind_rows(
ia_omnipath %>% mutate(type = 'ppi'),
ia_pwextra %>% mutate(type = 'ppi'),
ia_kinaseextra %>% mutate(type = 'ppi'),
ia_ligrec %>% mutate(type = 'ppi')))
interactions_filtered <- interactions[interactions$consensus_direction==1,]
interactions_filtered <- interactions_filtered[(interactions_filtered $consensus_inhibition +interactions_filtered$consensus_stimulation)==1,]
human_directed_interactome <- graph_from_data_frame(interactions_filtered, directed = TRUE, vertices = NULL)
human_directed_interactome <- simplify(human_directed_interactome, remove.multiple = FALSE, remove.loops = TRUE)
a = which_multiple(human_directed_interactome)
edge_indexes = E(human_directed_interactome)
human_directed_interactome  = subgraph.edges(human_directed_interactome, edge_indexes[a==FALSE])
giant.component <- function(graph, ...) {
cl <- clusters(graph, ...)
induced_subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
human_directed_interactome_giant_component  = giant.component(human_directed_interactome)
write_graph(human_directed_interactome_giant_component, "directed_human_interactome.ncol", format="ncol")
human_directed_interactome_filtered = as_data_frame(human_directed_interactome_giant_component, what = "edges")
View(human_directed_interactome_filtered)
ia_transcriptional <- import_TFregulons_Interactions(confidence_level = c('A', 'B', 'C')) %>% as_tibble()
# After importing dataframe we go through again the same steps as for the PPIs
# Filtering only interactions where we know the direction and only inhibitory or excitatory.
ia_transcriptional <- ia_transcriptional[ia_transcriptional$consensus_direction==1,]
ia_transcriptional <- ia_transcriptional[(ia_transcriptional $consensus_stimulation+ia_transcriptional$consensus_stimulation)==1,]
# Make a graph and exclude self loops and multiple edges.
# We do not make a giant compnent for the graph, due to the TF-target interactome is not fully discovered and has multiple valuable components.
ia_transcriptional2 <- graph_from_data_frame(ia_transcriptional, directed = TRUE, vertices = NULL)
ia_transcriptional2 <- simplify(ia_transcriptional2, remove.multiple = FALSE, remove.loops = TRUE)
a = which_multiple(ia_transcriptional2)
edge_indexes = E(ia_transcriptional2)
ia_transcriptional2  = subgraph.edges(ia_transcriptional2, edge_indexes[a==FALSE])
# Write results into files for further work
human_tf_data_filtered = as_data_frame(ia_transcriptional2, what = "edges")
View(human_tf_data_filtered)
ia_transcriptional <- import_TFregulons_Interactions(confidence_level = c('A', 'B', 'C')) %>% as_tibble()
ia_transcriptional <- ia_transcriptional[ia_transcriptional$consensus_direction==1,]
ia_transcriptional <- ia_transcriptional[(ia_transcriptional $consensus_stimulation+ia_transcriptional$consensus_stimulation)==1,]
ia_transcriptional <- ia_transcriptional[ia_transcriptional$consensus_direction==1,]
ia_transcriptional <- import_TFregulons_Interactions(confidence_level = c('A', 'B', 'C')) %>% as_tibble()
ia_transcriptional <- ia_transcriptional[ia_transcriptional$consensus_direction==1,]
View(ia_transcriptional)
ia_transcriptional <- ia_transcriptional[(ia_transcriptional$consensus_stimulation+ia_transcriptional$consensus_inhibition)==1,]
ia_transcriptional2 <- graph_from_data_frame(ia_transcriptional, directed = TRUE, vertices = NULL)
ia_transcriptional2 <- simplify(ia_transcriptional2, remove.multiple = FALSE, remove.loops = TRUE)
a = which_multiple(ia_transcriptional2)
edge_indexes = E(ia_transcriptional2)
ia_transcriptional2  = subgraph.edges(ia_transcriptional2, edge_indexes[a==FALSE])
human_tf_data_filtered = as_data_frame(ia_transcriptional2, what = "edges")
View(human_tf_data_filtered)
View(ia_transcriptional)
