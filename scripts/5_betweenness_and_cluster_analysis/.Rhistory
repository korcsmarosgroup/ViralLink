clus_filt <- nodes2 %>% select(MCODE_Cluster) %>% group_by(MCODE_Cluster) %>% count() %>% filter(MCODE_Cluster != "NA")
View(clus_filt)
if("MCODE_Cluster" %in% colnames(nodes2)){
cluster = TRUE
clus_filt <- nodes2 %>% select(MCODE_Cluster) %>% group_by(MCODE_Cluster) %>% count() %>% filter(MCODE_Cluster != "NA")
} else {
cluster = FALSE
}
if (cluster){
for (i in clus_filt$MCODE_Cluster){
print(cluster)
}
}
if (cluster){
for (i in clus_filt$MCODE_Cluster){
print(i)
}
}
createSubnetwork(i, by.col = "MCODE_Cluster", subnetwork.name = i,network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
createSubnetwork(subnetwork.name = i,network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
createSubnetwork(edges=all, subnetwork.name = i,network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
createSubnetwork(edges=all, subnetwork.name = i,network = "causal network")
createSubnetwork(edges="all", subnetwork.name = i,network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
createSubnetwork(edges="all", subnetwork.name = i,network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
createSubnetwork(edges="all", subnetwork.name = i,network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
createSubnetwork(nodes="selected",edges="all", subnetwork.name = i,network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
selectEdgesConnectingSelectedNodes()
createSubnetwork(nodes="selected",edges="all", subnetwork.name = i,network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
selectEdgesConnectingSelectedNodes()
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
selectEdgesConnectingSelectedNodes()
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
selectEdgesConnectingSelectedNodes()
createSubnetwork(nodes="selected", subnetwork.name = i,network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
selectEdgesConnectingSelectedNodes( network="causal network")
createSubnetwork(nodes="selected", subnetwork.name = i,network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
selectEdgesConnectingSelectedNodes(network="causal network")
i
i <- "Cluster 1"
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
selectEdgesConnectingSelectedNodes(network="causal network")
createSubnetwork(nodes="selected", subnetwork.name = i,network = "causal network")
# Author : Agatha Treveil
# Date : June 2020
#
# Script to calculate betweenness centrality and identify clusters (using MCODE) in directed causal network.
# REQUIRES CYTOSCAPE PROGRAM TO BE OPEN TO RUN CLUSTERING - if not open the clustering will be skipped
#
# Input: Directed causal network output from 'combined_edge_node_tables.R'
#        Node table output from 'combined_edge_node_tables.R'
#
# Output: Updated node table with new column for betweenness centrality and, if MCODE successfully ran,
#         3 new columns with MCODE results.
##### Setup #####
# Install requried packages
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("RCy3", quietly = TRUE))
BiocManager::install("RCy3")
if (!requireNamespace("dplyr", quietly = TRUE))
install.packages("dplyr")
if (!requireNamespace("tibble", quietly = TRUE))
install.packages("tibble")
if (!requireNamespace("igraph", quietly = TRUE))
install.packages("igraph")
# Load packages
library(dplyr)
library(tibble)
library(RCy3)
library(igraph)
outdir <- "/Users/treveila/Documents/OneDrive - Norwich BioScience Institutes/Research/covid/covid_stream1/test"
# Directed causal network output from 'combined_edge_node_tables.R'
net <- read.csv(file.path(outdir,"4_create_network", "final_network.txt"), sep = "\t")
# Node table output from 'combined_edge_node_tables.R'
nodes <- read.csv(file.path(outdir,"4_create_network", "node_table.txt"), sep = "\t")
# Create output dir if required
path <- file.path(outdir, "5_betweenness_and_cluster_analysis")
dir.create(path, showWarnings = FALSE, recursive=TRUE)
##### Betweenness centrality #####
# Convert to igraph network
i_net <- graph_from_data_frame(net, directed=TRUE)
# Calculate node betweenness values
betweenness_res <- betweenness(i_net, v = V(i_net), directed = TRUE, weights = NULL,
nobigint = TRUE, normalized = FALSE)
# Get into dataframe
betweenness_res2 <- data.frame(betweenness_centrality=sort(betweenness_res, decreasing=TRUE)) %>% tibble::rownames_to_column()
# Add to node table
nodes_2 <- left_join(nodes, betweenness_res2, by = c("node"="rowname"))
##### Clustering #####
cytoscape_func <- function(i_net){
# Function to carry out MCODE clustering and export MCODE node annotations
# Only to be run if already checked that the script can connect to cytoscape >= v7
# Returns node table with MCODE results - or empty table if couldn't get MCODE running
# Install MCODE all
install_error <- FALSE
tryCatch({installApp("MCODE")}, error=function(e) {install_error <<- TRUE})
# Only continue if success installing MCODE, else print error
if (install_error){
print('Error installing MCODE app - skipping MCODE clustering')
clust_res <- ""
} else {
# Import network into igraph
createNetworkFromIgraph(i_net,"whole_network")
# Carry out clustering
commandsRun('mcode cluster degreeCutoff=2 fluff=FALSE haircut=TRUE nodeScoreCutoff=0.2 kCore=2 maxDepthFromStart=100')
# Wait for Cytoscape to catch up
Sys.sleep(30)
# Get results as table
clust_res <- getTableColumns(table="node",columns=c("name", "MCODE_Node_Status", "MCODE_Score","MCODE_Cluster"))
}
# Close cytoscape session
closeSession(FALSE)
return(clust_res)
}
# See if cytoscape is open and >= v7
cyto_error <- FALSE
tryCatch( {msg <- cytoscapePing () } , error = function(e) {cyto_error <<- TRUE})
if (!cyto_error){
if (cytoscapeVersionInfo ()[2] >= 3.7){
continue = TRUE
print('Successfully connected to Cytoscape - carrying out MCODE clustering and creating Cytoscape file')
} else {
continue = FALSE
print('Successfully connected to Cytscape BUT version not >= 3.7 - skipping MCODE clustering and creation of Cytoscape file')
}
} else {
continue = FALSE
print('Could not connect to Cytoscape - skipping MCODE clustering and creation of Cytoscape file')
}
# Run clustering if cytoscape open and new enough - and RCy3 app new enough (error getting MCODE results if 'its not')
if(continue & (packageVersion("RCy3") >= "2.6.0")){
# Call function to run MCODE
results <- cytoscape_func(i_net)
# If there are results in the table then MCODE ran
if(results != ""){
# Un-list the MCODE_cluster column
results2 <- results %>% unnest(MCODE_Cluster) %>% group_by(name) %>% mutate(MCODE_Cluster = paste0(MCODE_Cluster, collapse = ";"))
# Join the mcode cluster results to the node table
nodes_3 <- left_join(nodes_2, results2, by = c("node"="name"))
} else {
# If MCODE couldn't install then there won't be any results
nodes_3 <- nodes_2
}
} else {
# If Cytoscape wasn't open (or too old) then there won't be any results
nodes_3 <- nodes_2
}
##### Save output #####
# Save updated node table
write.table(nodes_3, file=file.path(path, "node_table_betweenness_clusters.txt"), row.names = FALSE, quote = FALSE, sep = "\t")
# Author : Agatha Treveil
# Date : June 2020
#
# Script to calculate betweenness centrality and identify clusters (using MCODE) in directed causal network.
# REQUIRES CYTOSCAPE PROGRAM TO BE OPEN TO RUN CLUSTERING - if not open the clustering will be skipped
#
# Input: Directed causal network output from 'combined_edge_node_tables.R'
#        Node table output from 'combined_edge_node_tables.R'
#
# Output: Updated node table with new column for betweenness centrality and, if MCODE successfully ran,
#         3 new columns with MCODE results.
##### Setup #####
# Install requried packages
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("RCy3", quietly = TRUE))
BiocManager::install("RCy3")
if (!requireNamespace("dplyr", quietly = TRUE))
install.packages("dplyr")
if (!requireNamespace("tibble", quietly = TRUE))
install.packages("tibble")
if (!requireNamespace("igraph", quietly = TRUE))
install.packages("igraph")
if (!requireNamespace("tidyr", quietly = TRUE))
install.packages("tidyr")
# Load packages
library(dplyr)
library(tibble)
library(RCy3)
library(igraph)
library(tidyr)
outdir <- "/Users/treveila/Documents/OneDrive - Norwich BioScience Institutes/Research/covid/covid_stream1/test"
# Directed causal network output from 'combined_edge_node_tables.R'
net <- read.csv(file.path(outdir,"4_create_network", "final_network.txt"), sep = "\t")
# Node table output from 'combined_edge_node_tables.R'
nodes <- read.csv(file.path(outdir,"4_create_network", "node_table.txt"), sep = "\t")
# Create output dir if required
path <- file.path(outdir, "5_betweenness_and_cluster_analysis")
dir.create(path, showWarnings = FALSE, recursive=TRUE)
##### Betweenness centrality #####
# Convert to igraph network
i_net <- graph_from_data_frame(net, directed=TRUE)
# Calculate node betweenness values
betweenness_res <- betweenness(i_net, v = V(i_net), directed = TRUE, weights = NULL,
nobigint = TRUE, normalized = FALSE)
# Get into dataframe
betweenness_res2 <- data.frame(betweenness_centrality=sort(betweenness_res, decreasing=TRUE)) %>% tibble::rownames_to_column()
# Add to node table
nodes_2 <- left_join(nodes, betweenness_res2, by = c("node"="rowname"))
##### Clustering #####
cytoscape_func <- function(i_net){
# Function to carry out MCODE clustering and export MCODE node annotations
# Only to be run if already checked that the script can connect to cytoscape >= v7
# Returns node table with MCODE results - or empty table if couldn't get MCODE running
# Install MCODE all
install_error <- FALSE
tryCatch({installApp("MCODE")}, error=function(e) {install_error <<- TRUE})
# Only continue if success installing MCODE, else print error
if (install_error){
print('Error installing MCODE app - skipping MCODE clustering')
clust_res <- ""
} else {
# Import network into igraph
createNetworkFromIgraph(i_net,"whole_network")
# Carry out clustering
commandsRun('mcode cluster degreeCutoff=2 fluff=FALSE haircut=TRUE nodeScoreCutoff=0.2 kCore=2 maxDepthFromStart=100')
# Wait for Cytoscape to catch up
Sys.sleep(60)
# Get results as table
clust_res <- getTableColumns(table="node",columns=c("name", "MCODE_Node_Status", "MCODE_Score","MCODE_Cluster"))
}
# Close cytoscape session
closeSession(FALSE)
return(clust_res)
}
# See if cytoscape is open and >= v7
cyto_error <- FALSE
tryCatch( {msg <- cytoscapePing () } , error = function(e) {cyto_error <<- TRUE})
if (!cyto_error){
if (cytoscapeVersionInfo ()[2] >= 3.7){
continue = TRUE
print('Successfully connected to Cytoscape - carrying out MCODE clustering and creating Cytoscape file')
} else {
continue = FALSE
print('Successfully connected to Cytscape BUT version not >= 3.7 - skipping MCODE clustering and creation of Cytoscape file')
}
} else {
continue = FALSE
print('Could not connect to Cytoscape - skipping MCODE clustering and creation of Cytoscape file')
}
# Run clustering if cytoscape open and new enough - and RCy3 app new enough (error getting MCODE results if 'its not')
if(continue & (packageVersion("RCy3") >= "2.6.0")){
# Call function to run MCODE
results <- cytoscape_func(i_net)
# If there are results in the table then MCODE ran
if(results != ""){
# Un-list the MCODE_cluster column
results2 <- results %>% unnest(MCODE_Cluster) %>% group_by(name) %>% mutate(MCODE_Cluster = paste0(MCODE_Cluster, collapse = ";"))
# Join the mcode cluster results to the node table
nodes_3 <- left_join(nodes_2, results2, by = c("node"="name"))
} else {
# If MCODE couldn't install then there won't be any results
nodes_3 <- nodes_2
}
} else {
# If Cytoscape wasn't open (or too old) then there won't be any results
nodes_3 <- nodes_2
}
##### Save output #####
# Save updated node table
write.table(nodes_3, file=file.path(path, "node_table_betweenness_clusters.txt"), row.names = FALSE, quote = FALSE, sep = "\t")
outdir <- "/Users/treveila/Documents/OneDrive - Norwich BioScience Institutes/Research/covid/covid_stream1/test"
# Directed causal network output from 'combined_edge_node_tables.R'
net <- read.csv(file.path(outdir,"4_create_network", "final_network.txt"), sep = "\t")
# Node table output from 'combined_edge_node_tables.R'
nodes <- read.csv(file.path(outdir,"4_create_network", "node_table.txt"), sep = "\t")
# Create output dir if required
path <- file.path(outdir, "5_betweenness_and_cluster_analysis")
dir.create(path, showWarnings = FALSE, recursive=TRUE)
##### Betweenness centrality #####
# Convert to igraph network
i_net <- graph_from_data_frame(net, directed=TRUE)
# Calculate node betweenness values
betweenness_res <- betweenness(i_net, v = V(i_net), directed = TRUE, weights = NULL,
nobigint = TRUE, normalized = FALSE)
# Get into dataframe
betweenness_res2 <- data.frame(betweenness_centrality=sort(betweenness_res, decreasing=TRUE)) %>% tibble::rownames_to_column()
# Add to node table
nodes_2 <- left_join(nodes, betweenness_res2, by = c("node"="rowname"))
# Import network into igraph
createNetworkFromIgraph(i_net,"whole_network")
# Carry out clustering
commandsRun('mcode cluster degreeCutoff=2 fluff=FALSE haircut=TRUE nodeScoreCutoff=0.2 kCore=2 maxDepthFromStart=100')
# Get results as table
clust_res <- getTableColumns(table="node",columns=c("name", "MCODE_Node_Status", "MCODE_Score","MCODE_Cluster"))
View(clust_res)
# Get results as table
clust_res <- getTableColumns(table="node")#,columns=c("name", "MCODE_Node_Status", "MCODE_Score","MCODE_Cluster"))
View(clust_res)
# Get results as table
clust_res <- getTableColumns(table="node"),columns=c("name", "MCODE_Node_Status")#, "MCODE_Score","MCODE_Cluster"))
# Get results as table
clust_res <- getTableColumns(table="node"),columns=c("name", "MCODE_Node_Status"))#, "MCODE_Score","MCODE_Cluster"))
# Get results as table
clust_res <- getTableColumns(table="node",columns=c("name", "MCODE_Node_Status"))#, "MCODE_Score","MCODE_Cluster"))
View(clust_res)
# Get results as table
clust_res <- getTableColumns(table="node",columns=c("name", "MCODE_Cluster"))
View(clust_res)
createGroupByColumn(group.name="Cluster 1",
column ="MCODE_Cluster",
value = NULL,
network = NULL,
base.url = .defaultBaseUrl
)
createGroupByColumn(group.name="Cluster 1",
column ="MCODE_Cluster"
)
createColumnFilter(filter.name='clustered', column='MCODE_Node_Status')
selectNodes("clustered", by.col = "MCODE_Node_Statis", network="causal network")
selectNodes("clustered", by.col = "MCODE_Node_Status")
selectEdgesConnectingSelectedNodes()
createSubnetwork(nodes="selected", subnetwork.name = "clustered_nodes")
selectNodes("clustered", by.col = "MCODE_Node_Status")
selectEdgesConnectingSelectedNodes(network="whole_network")
createSubnetwork(nodes="selected", subnetwork.name = "clustered_nodes")
selectNodes("clustered", by.col = "MCODE_Node_Status")
selectEdgesConnectingSelectedNodes(network="whole_network")
createSubnetwork(nodes="selected", subnetwork.name = "clustered_nodes", network="whole_network")
createSubnetwork(subnetwork.name = "clustered_nodes", network="whole_network")
createSubnetwork(subnetwork.name = "clustered_nodes", network="whole_network")
# Import network into igraph
createNetworkFromIgraph(i_net,"whole_network")
# Carry out clustering
commandsRun('mcode cluster degreeCutoff=2 fluff=FALSE haircut=TRUE nodeScoreCutoff=0.2 kCore=2 maxDepthFromStart=100')
selectNodes("clustered", by.col = "MCODE_Node_Status")
selectEdgesConnectingSelectedNodes(network="whole_network")
createSubnetwork(subnetwork.name = "clustered_nodes", network="whole_network")
selectNodes("clustered", by.col = "MCODE_Node_Status")
### ANOTHER BUG IN RCY3????
createSubnetwork(subnetwork.name = "clustered_nodes", network="whole_network")
selectNodes("unclustered", by.col = "MCODE_Node_Status")
deleteSelectedNodes(network = whole_network)
selectNodes("unclustered", by.col = "MCODE_Node_Status", network="whole_network")
deleteSelectedNodes(network = "whole_network")
# Import network into igraph
createNetworkFromIgraph(i_net,"whole_network")
# Carry out clustering
commandsRun('mcode cluster degreeCutoff=2 fluff=FALSE haircut=TRUE nodeScoreCutoff=0.2 kCore=2 maxDepthFromStart=100')
selectNodes("unclustered", by.col = "MCODE_Node_Status", network="whole_network")
deleteSelectedNodes(network = "whole_network")
# Get results as table ## POSSIBLE BUG IN RCY3???
clust_res <- getTableColumns(table="node",columns=c("name", "MCODE_Node_Status", "MCODE_Score","MCODE_Cluster"))
View(clust_res)
# Close cytoscape session
closeSession(FALSE)
cytoscape_func <- function(i_net){
# Function to carry out MCODE clustering and export MCODE node annotations
# Only to be run if already checked that the script can connect to cytoscape >= v7
# Returns node table with MCODE results - or empty table if couldn't get MCODE running
# Install MCODE all
install_error <- FALSE
tryCatch({installApp("MCODE")}, error=function(e) {install_error <<- TRUE})
# Only continue if success installing MCODE, else print error
if (install_error){
print('Error installing MCODE app - skipping MCODE clustering')
clust_res <- ""
} else {
# Import network into igraph
createNetworkFromIgraph(i_net,"whole_network")
# Carry out clustering
commandsRun('mcode cluster degreeCutoff=2 fluff=FALSE haircut=TRUE nodeScoreCutoff=0.2 kCore=2 maxDepthFromStart=100')
# Wait for Cytoscape to catch up
Sys.sleep(60)
###### PROBLEMS ##########
# Get results as table ## POSSIBLE BUG IN RCY3 as the MCODE_Cluster col is mixed up???
#clust_res <- getTableColumns(table="node",columns=c("name", "MCODE_Node_Status", "MCODE_Score","MCODE_Cluster"))
# Instead get just the clustered/seed nodes and export node table
selectNodes("unclustered", by.col = "MCODE_Node_Status", network="whole_network")
deleteSelectedNodes(network = "whole_network")
# Creating subnetwork also doesn't appear to work  - another bug?
#selectEdgesConnectingSelectedNodes(network="whole_network")
#createSubnetwork(subnetwork.name = "clustered_nodes", network="whole_network")
# Export subnetwork node table
clust_res <- getTableColumns(table="node",columns=c("name", "MCODE_Node_Status", "MCODE_Score","MCODE_Cluster"))
}
# Close cytoscape session
closeSession(FALSE)
return(clust_res)
}
# See if cytoscape is open and >= v7
cyto_error <- FALSE
tryCatch( {msg <- cytoscapePing () } , error = function(e) {cyto_error <<- TRUE})
if (!cyto_error){
if (cytoscapeVersionInfo ()[2] >= 3.7){
continue = TRUE
print('Successfully connected to Cytoscape - carrying out MCODE clustering and creating Cytoscape file')
} else {
continue = FALSE
print('Successfully connected to Cytscape BUT version not >= 3.7 - skipping MCODE clustering and creation of Cytoscape file')
}
} else {
continue = FALSE
print('Could not connect to Cytoscape - skipping MCODE clustering and creation of Cytoscape file')
}
# Run clustering if cytoscape open and new enough - and RCy3 app new enough (error getting MCODE results if 'its not')
if(continue & (packageVersion("RCy3") >= "2.6.0")){
# Call function to run MCODE
results <- cytoscape_func(i_net)
# If there are results in the table then MCODE ran
if(results != ""){
# Un-list the MCODE_cluster column
results2 <- results %>% unnest(MCODE_Cluster) %>% group_by(name) %>% mutate(MCODE_Cluster = paste0(MCODE_Cluster, collapse = ";"))
# Join the mcode cluster results to the node table
nodes_3 <- left_join(nodes_2, results2, by = c("node"="name"))
} else {
# If MCODE couldn't install then there won't be any results
nodes_3 <- nodes_2
}
} else {
# If Cytoscape wasn't open (or too old) then there won't be any results
nodes_3 <- nodes_2
}
##### Save output #####
# Save updated node table
write.table(nodes_3, file=file.path(path, "node_table_betweenness_clusters.txt"), row.names = FALSE, quote = FALSE, sep = "\t")
# Install requried packages
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("RCy3", quietly = TRUE))
BiocManager::install("RCy3")
if (!requireNamespace("dplyr", quietly = TRUE))
install.packages("dplyr")
# Load packages
library(dplyr)
library(RCy3)
# Output directory
outdir <- "/Users/treveila/Documents/OneDrive - Norwich BioScience Institutes/Research/covid/covid_stream1/test"
# Directed causal network output from 'combined_edge_node_tables.R'
net <- read.csv(file.path(outdir,"4_create_network", "final_network.txt"), sep = "\t")
# Node table output from 'betweenness_and_clustering.R'
nodes <- read.csv(file.path(outdir,"5_betweenness_and_cluster_analysis", "node_table_betweenness_clusters.txt"), sep = "\t")
# Create output dir if required
path <- file.path(outdir, "5_betweenness_and_cluster_analysis")
dir.create(path, showWarnings = FALSE, recursive=TRUE)
##### Preprocess #####
net2 <- net %>% rename("source"= "Source.node", "target"="Target.node", "interaction"="Relationship") %>% select(-c(layer))
nodes2 <- nodes %>% rename("id" = "node")
# Determine if clustering has been carried out
if("MCODE_Cluster" %in% colnames(nodes2)){
cluster = TRUE
clus_filt <- nodes2 %>% select(MCODE_Cluster) %>% group_by(MCODE_Cluster) %>% count() %>% filter(MCODE_Cluster != "NA")
} else {
cluster = FALSE
}
# Determine if betweenness centrality calcualtions have been carried out
if("betweenness_centraliy" %in% colnames(nodes2)){
bet = TRUE
} else {
bet=FALSE
}
# See if cytoscape is open
cyto_error <- FALSE
tryCatch( {msg <- cytoscapePing () } , error = function(e) {cyto_error <<- TRUE})
if (!cyto_error){
continue = TRUE
print('Successfully connected to Cytoscape - continuing with visualisation')
} else {
continue = FALSE
print('Could not connect to Cytoscape - skipping visualisation')
}
# Run visualisation if cytoscape open
if(continue){
# Add network to cytoscape
createNetworkFromDataFrames(nodes2,net2, title="causal network")
# Colour by Betweenness centrality if data exists in network
if (bet){
setNodeColorMapping("betweenness_centrality",mapping.type="c", network="causal network")
}
# Subnetwork for each cluster
if (cluster){
for (i in clus_filt$MCODE_Cluster){
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
selectEdgesConnectingSelectedNodes(network="causal network")
createSubnetwork(nodes="selected", subnetwork.name = i,network = "causal network")
layoutNetwork()
}
}
# Save cys file
}
# Subnetwork for each cluster
if (cluster){
for (i in clus_filt$MCODE_Cluster){
clearSelection(type = "both", network = "causal_network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
selectEdgesConnectingSelectedNodes(network="causal network")
createSubnetwork(nodes="selected", subnetwork.name = i,network = "causal network")
layoutNetwork()
}
}
# Subnetwork for each cluster
if (cluster){
for (i in clus_filt$MCODE_Cluster){
clearSelection(type = "both", network = "causal network")
selectNodes(i, by.col = "MCODE_Cluster", network="causal network")
selectEdgesConnectingSelectedNodes(network="causal network")
createSubnetwork(nodes="selected", subnetwork.name = i,network = "causal network")
layoutNetwork()
}
}
# Save cys file
saveSession(filename = file.path(path, "causal_network.cys"))
